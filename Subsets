/* Given an integer array nums of unique elements, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 

Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
Example 2:

Input: nums = [0]
Output: [[],[0]]
https://leetcode.com/explore/interview/card/top-interview-questions-medium/109/backtracking/796/
 
 */
 
 class Solution {
    List<List<Integer>> result1;
    Set<List<Integer>> result;
     public List<List<Integer>> subsets(int[] nums) {
    result = new HashSet<>();
    List<Integer> numsList = Arrays.stream(nums)
        .boxed()
        .collect(Collectors.toList());
    generateSubsets(numsList, new ArrayList<>());
    result1 = new ArrayList<>(result);
    return result1;
  }

  private void generateSubsets(List<Integer> ip, List<Integer> op){

    if(ip.isEmpty()) {
      result.add(op);
      return;
    }

    List<Integer> op1 = new ArrayList<>(op);
    List<Integer> op2 = new ArrayList<>(op);

    op2.add(ip.get(0));
    ip.remove(ip.get(0));

    //copying arraylist elements to prevent deduplication.
    List<Integer> arr1 = new ArrayList<>(ip);
    List<Integer> arr2 = new ArrayList<>(ip);
    
    generateSubsets(arr1, op1);
    generateSubsets(arr2, op2);

  }
}
