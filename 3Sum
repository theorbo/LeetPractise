/* Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

 

Example 1:

Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]
Example 2:

Input: nums = []
Output: []
Example 3:

Input: nums = [0]
Output: []. 

Notes : Solution is O(N2) : keep one digit constant and remaining logic of two sum.
*/

class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
    Arrays.sort(nums);

    Set<List<Integer>> result1 = new HashSet<>();

    for (int i = 0; i < nums.length; i++) {
      for (int j = i + 1, k = nums.length - 1; j < k && i < j && k > i; ) {

        if (nums[i] + nums[j] + nums[k] == 0) {
          List<Integer> temp = new ArrayList<>();
          temp.add(nums[i]);
          temp.add(nums[j]);
          temp.add(nums[k]);
          result1.add(temp);
          j++;
          k--;  
        } else {
          if (nums[j] + nums[k] > -(nums[i])) {
            k--;
          } else {
            j++;
          }
        }
      }
    }
    List<List<Integer>> result = new ArrayList<>(result1);
    return result;
    }
    
}
