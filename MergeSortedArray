/* You are given two integer arrays nums1 and nums2, sorted in non-decreasing order, and two integers m and n, representing the number of elements in nums1 and nums2 respectively.

Merge nums1 and nums2 into a single array sorted in non-decreasing order.

The final sorted array should not be returned by the function, but instead be stored inside the array nums1. To accommodate this, nums1 has a length of m + n, where the first m elements denote the elements that should be merged, and the last n elements are set to 0 and should be ignored. nums2 has a length of n.

*/

class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        m = nums1.length ;
        n = nums2.length;
        int l = m-n, k = 0, i = 0, j = 0;
     
        int[] result = new int[m];
        System.out.println("l is : " + l);
        while(i < l && j < n){
            if(nums1[i] < nums2[j]){
               result[k] = nums1[i];
               i++;
            }else {
                result[k] = nums2[j];
                j++;
            }
            k++;    
        }
        
        if(i < l){
            while(i < l){
               result[k] = nums1[i];
               i++; 
               k++; 
            }
        }
        
        if(j < n){
            while(j < n){
                result[k] = nums2[j];
                j++; 
                k++;
            }
        }
        
        for(i = 0; i < m; i++){
            nums1[i] = result[i];
        }
        
    }
}
