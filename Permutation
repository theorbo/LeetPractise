/* Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.
Example 1:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]
https://leetcode.com/explore/interview/card/top-interview-questions-medium/109/backtracking/795/
*/


class Solution {
    List<List<Integer>> result;
    Set<List<Integer>> result1;
   public List<List<Integer>> permute(int[] nums) {
    result1 = new HashSet<>();
    getAllPermutations(nums, 0);
    result = new ArrayList<>(result1);
    return result;
  }

  private void getAllPermutations(int[] nums, int pos) {
    int n = nums.length;
    if (pos == n) return;

    for (int i = pos; i < n; i++) {
      int[] temp = swap(nums, pos, i);
      result1.add(integerList(temp));
      getAllPermutations(temp, pos + 1);
    }
  }

  private List<Integer> integerList(int[] nums) {
    List<Integer> ans = new ArrayList<>();
    for (int num : nums) {
      ans.add(num);
    }
    return ans;
  }

  private int[] swap(int[] nums, int pos, int i) {
    int[] a = Arrays.copyOf(nums, nums.length);

    int temp = a[pos];
    a[pos] = a[i];
    a[i] = temp;
    return a;
  }
}
