/* Given the root of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]
Example 2:

Input: root = [1]
Output: [[1]]
Example 3:

Input: root = []
Output: []
https://leetcode.com/explore/interview/card/top-interview-questions-medium/108/trees-and-graphs/787/
*/
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<List<Integer>> result; 
   public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
     result = new ArrayList<>();  
    if(root == null)
      return result;

    Queue<TreeNode> queue = new LinkedList<TreeNode>();
    queue.add(root);
    zigzagLevelO(queue, true);
    return result;
  }

  public void zigzagLevelO(Queue<TreeNode> queue, boolean ltr) {

    int l = queue.size();

    if (queue.isEmpty()) return;

    List<Integer> temp1 = new ArrayList<>();

    while (l > 0) {
      TreeNode temp = queue.poll();
      if(temp.left != null)  
      queue.add(temp.left);
        if(temp.right != null)  
      queue.add(temp.right);
      temp1.add(temp.val);
      l--;
    }

    if(!ltr){
      Collections.reverse(temp1);
    }
    result.add(temp1);

    zigzagLevelO(queue, !ltr);
  }

}
