/* Given a string s, find the length of the longest substring without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
*/

class Solution {
    public int lengthOfLongestSubstring(String s) {
      Map<Character, Integer> mp = new HashMap<>();
    int  maxCount = 0, j = 0;
    for(int i = 0; i < s.length(); i++){
      char b = s.charAt(i);
      if(!mp.containsKey(b)){
        maxCount = Math.max(i-j+1, maxCount);
        mp.put(b,1);
      }
      else{
        while(s.charAt(j) != b){
          mp.remove(s.charAt(j));
          j++;
        }
        j++;
      }
    }
    return maxCount;
    }
}
