/* The count-and-say sequence is a sequence of digit strings defined by the recursive formula:

countAndSay(1) = "1"
countAndSay(n) is the way you would "say" the digit string from countAndSay(n-1), which is then converted into a different digit string.
To determine how you "say" a digit string, split it into the minimal number of groups so that each group is a contiguous section all of the same character. Then for each group, say the number of characters, then say the character. To convert the saying into a digit string, replace the counts with a number and concatenate every saying.

For example, the saying and conversion for digit string "3322251":
Given a positive integer n, return the nth term of the count-and-say sequence.
The following are the terms from n=1 to n=10 of the count-and-say sequence:
 1.     1
 2.     11
 3.     21
 4.     1211
 5.     111221 
 6.     312211
 7.     13112221
 8.     1113213211
 9.     31131211131221
10.     13211311123113112211

https://leetcode.com/explore/interview/card/top-interview-questions-medium/103/array-and-strings/4153/

*/

class Solution {
    public String countAndSay(int n) {
    return countNSay(n);
  }

  public String countNSay(int n){
    String temp = "1";
    for(int i = 2; i <= n ;i++){
      temp = countNumber(temp);
    }

    return temp;

  }

  private String countNumber(String s){
    int count = 1;
    char prev = s.charAt(0);
   // System.out.println("String s : " + s);
    StringBuilder str = new StringBuilder();
    if(s.length() == 1){
      str.append(count);
      str.append(prev);
      return str.toString();
    }
    for(int i = 1; i < s.length(); i++){
      char current = s.charAt(i);
      if(current == prev){
        count ++;

      }
      else{
        str.append(count);
        str.append(prev);
        count = 1;
        prev = current;
      }

      if(i == s.length()-1){
        str.append(count);
        str.append(prev); }
    }
   // System.out.println("*****" + str.toString());
    return str.toString();
  }
}
