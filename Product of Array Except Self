/* Easy
Given an integer array nums, return an array answer such that answer[i] is equal to the product of all the elements of nums except nums[i].

The product of any prefix or suffix of nums is guaranteed to fit in a 32-bit integer.

You must write an algorithm that runs in O(n) time and without using the division operation.

 

Example 1:

Input: nums = [1,2,3,4]
Output: [24,12,8,6]
Example 2:

Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]*/

class Solution {
    public int[] productExceptSelf(int[] nums) {
        
        int product = 1;
        int len = nums.length;
        int[] result = new int[len];
        int noOfZero = 0;
        int productWithoutZero = 1;
        
        for(int i = 0 ; i < len; i++){
            product *= nums[i];
            if(nums[i] == 0){
               noOfZero++;
            }else{
                productWithoutZero *= nums[i];
            }
        }
        
        for(int i = 0; i < len; i++){
            if(nums[i] != 0)
            result[i] = product/nums[i];
            else{
                if(noOfZero == 1){
                   result[i] =  productWithoutZero;
                } else{
                    result[i] = 0;
                }
            }
        }
        return result;
    }
}
