/* Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
Example 2:

Input: digits = ""
Output: []
Example 3:

Input: digits = "2"
Output: ["a","b","c"]
https://leetcode.com/explore/interview/card/top-interview-questions-medium/109/backtracking/793/

*/

class Solution {
  public List<String> letterCombinations(String digits) {     
    String[] phone = {"", "", "abc", "def", "ghi", "jkl", "mno", "pqrs", "tuv", "wxyz"};
    return getAllCombinations(digits, phone);
  }

  private List<String> getAllCombinations(String s, String[] phone) {
    List<String> combinations = new ArrayList<>();
    int n = s.length();
      
    if(n == 0)
        return combinations;

    Queue<String> queue = new LinkedList<>();
    queue.add("");

    while (!queue.isEmpty()) {
      String temp = queue.poll();
      if (temp.length() == n) {
        combinations.add(temp);
      } else {
        int c = (int) s.charAt(temp.length()) -48;
        for (int i = 0; i < phone[c].length(); i++) {
          queue.add(temp + phone[c].charAt(i));
        }
      }
    }
    return combinations;
  }
}
