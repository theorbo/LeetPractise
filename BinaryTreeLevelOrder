/* Given the root of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        
        Queue<TreeNode> queue = new LinkedList<>();
        List<List<Integer>> result = new ArrayList<List<Integer>>();
        if(root != null)
         queue.add(root);
        
        while(true){
            int k = queue.size();
            if(k == 0)
                break;
            List<Integer> l = new ArrayList<>();
            while(k > 0){
                TreeNode node = queue.poll();
                l.add(node.val);
                if(node.left != null)
                    queue.add(node.left);
                
                if(node.right != null)
                    queue.add(node.right);
                k--;
            }
            result.add(l);
        }
        
      return result;  
        
    }
}
